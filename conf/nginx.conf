worker_processes  4;        #nginx worker 数量
error_log logs/error.log error;   #指定错误日志文件路径
events {
    worker_connections 1024;
}

http {
    # 设置默认 lua 搜索路径，添加 lua 路径
    # lua_package_path 'lua/?.lua;/blah/?.lua;/Users/chenpengzhou/Documents/project/openresty-test/lua/?.lua;;';
    # “/Users/chenpengzhou/Documents/project/openresty-test/conf/lua/?.lua;”为当前路径的绝对路径，使用时需要修改

    lua_package_path 'lua/?.lua;/blah/?.lua;/Users/chenpengzhou/Documents/project/LiteQuestionConsole/lua/?.lua;;';

    # 对于开发研究，我们可以对代码 cache 进行关闭，这样我们不必每次都重新加载 nginx。
    lua_code_cache off;

    # 定义nginx的共享缓存
    lua_shared_dict my_cache 128m;

    # 内容初始化
    # init_worker_by_lua_file lua/init.lua;

    server {
        listen 6699;
        # 读取req里的body信息
        lua_need_request_body on;

        location / {
            content_by_lua_block {  
                ngx.say("Hello World!")
            }
        }

        # 在代码路径中使用nginx变量
        # 注意： nginx var 的变量一定要谨慎，否则将会带来非常大的风险
        location ~ ^/api/calculator/([-_a-zA-Z0-9/]+) {
            # 准入阶段完成参数验证
            access_by_lua_file  lua/access_check.lua;

            # 内容生成阶段
            content_by_lua_file lua/$1.lua;

            # 响应体处理阶段
            # body_filter_by_lua lua/edit_body.lua;
        }

        location ~ ^/api/service/([-_a-zA-Z0-9/]+) {
            # 内容生成阶段
            content_by_lua_file lua/$1.lua;
        }
    }
}